program { 
    InformarLaCantidadDeBaldosas()
}

procedure InformarLaCantidadDeBaldosas() {
/*
* PROPÓSITO: Informa la cantidad de baldosas que hay en el patio
* PRECONDICIÓN: Hay al menos una celda (podriamos diseñar el programa para que retorne "0" baldosas)
*/
  IrALaEsquinaSuroeste()
  Poner__Veces(Negro, cantidadDeBaldosas())
}

function cantidadDeBaldosas() {
/*
*  PROPÓSITO: Cuenta la cantidad de baldosas que hay en el patio
*  PRECONDICIÓN: Ninguna
*/
    cantidadDeBaldosasYaVistas := 1
    while (not(esLaÚltimaBaldosa())) { // quedanElementosParaProcesar()
        PasarALaSiguienteBaldosa()  //PasarAlSiguienteElemento()
        cantidadDeBaldosasYaVistas :=  cantidadDeBaldosasYaVistas + 1  // ProcesarElementoActual()
    }
    return (cantidadDeBaldosasYaVistas)
}

procedure ComenzarElRecorrido() {
/*
*  PROPÓSITO: Comienza el recorrido dejando el cabezal en la esquina SO
*  PRECONDICIÓN: Ninguna
*/
    IrALaEsquinaSuroeste() 
}

function esLaÚltimaBaldosa() { 
/*
*  PROPÓSITO: Indica si el cabezal está en la última baldosa
*  PRECONDICIÓN: Ninguna
*  OBSERVACIÓN: Una baldosa es una celda
*/
    return (not(puedeMover(Este)) && not(puedeMover(Norte))) 
}

procedure PasarALaSiguienteBaldosa() {
/*
*  PROPÓSITO:  Se mueve a la siguiente baldosa dejando el cabezal alguna de las siguientes posiciones respecto de la actual:
*   * la celda lindante al Este
*   * una celda al Norte, en el borde Oeste
*  PRECONDICIÓN: Hay al menos una fila al Norte (puede estar representada por 1 o n celdas)
*  OBSERVACIÓN: 
*   * Una baldosa es una celda
*   * Se arma un recorrido simple por fila con dirección NE
*/    
    if(puedeMover(Este)) {
        Mover(Este)
    }
    else {
        Mover(Norte)
        IrAlBorde(Oeste)
    }
}

procedure IrALaEsquinaSuroeste() {
/*
*  PROPÓSITO: Ubica el cabezal en la esquina SO
*  PRECONDICIÓN: Ninguna
*/ 
  IrAlBorde(Oeste)
  IrAlBorde(Sur)
}
